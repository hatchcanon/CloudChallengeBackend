AWSTemplateFormatVersion: 2010-09-09
Description: New DynamoDB table, API Gateway and Lambda function
Parameters:
  apiGatewayStageName:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: prod
    Description: Which stage

  lambdaFunctionName:
    Type: String
    Default: addvisits
    Description: the lambdafunctionname

Resources:
  myDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: "site"
          AttributeType: S
      KeySchema:
        - AttributeName: "site"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "counter"

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: VisitCountAPI
      Description: "API automatically created by CloudFormation Stack"

  apiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: GET
        Type: AWS
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref "apiGateway"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          def write(event, context):
              dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
              table = dynamodb.Table('counter')
              table.update_item(
              Key={
                  'site': 'nathancho.site',
              },
              UpdateExpression='ADD visit :val',
              ExpressionAttributeValues={ ':val': 1 },
              ReturnValues="UPDATED_NEW"
              )
              response = table.get_item(
                  Key={
                      'site': 'nathancho.site',
                  }
              )
              return response['Item']['visit']
      Description: "Writes to DDB +1"
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "index.write"
      MemorySize: 128
      Role: arn:aws:iam::751215643565:role/lambda-dynamodb-perms
      Runtime: "python3.7"
      Timeout: 3

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/*'

Outputs:
  TableName:
    Value: !Ref myDynamoDBTable
    Description: Table name of the newly created DynamoDB table

  apiGatewayInvokeURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}"
    Description: Deployed API Endpoint

  lambdaArn:
    Value: !GetAtt lambdaFunction.Arn
    Description: Newly created Lambda function
